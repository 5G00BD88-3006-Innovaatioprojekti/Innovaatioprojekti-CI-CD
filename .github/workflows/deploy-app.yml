name: Deploy App
on:
  workflow_dispatch:
    inputs:
      app:
        description: 'App to deploy'
        required: true
        type: choice
        options:
          [
            sports-location-tracker,
            DV-datavarasto-ui,
            DV-user-management-service,
            DV-file-service,
            DV-gateway,
            DV-mongo-db,
          ]
      branch:
        description: 'Branch to deploy'
        required: true
        default: main
      env:
        description: 'Deploy environment'
        required: true
        type: choice
        options: [stg, prd]
        default: stg
      test:
        description: 'Run tests'
        required: true
        type: boolean
        default: false

concurrency:
  group: deploy
  cancel-in-progress: false # put workflow in queue instead of canceling

jobs:
  fetch-repo:
    runs-on: self-hosted
    steps:
      - name: Get repo name
        id: repo
        run: >-
          case ${{ github.event.inputs.app }} in
            sports-location-tracker) 
              echo '::set-output name=SSH_HOSTNAME::github.com-repo-sports-location-tracker'
              echo '::set-output name=GITHUB_ACCOUNT::ninopenttinen'
              echo '::set-output name=REPO_NAME::Sports-Location-Tracker-Public';;
            DV-datavarasto-ui)
              echo '::set-output name=SSH_HOSTNAME::github.com-repo-datavarasto-ui'
              echo '::set-output name=GITHUB_ACCOUNT::Datavarasto'
              echo '::set-output name=REPO_NAME::datavarasto-ui';;
            DV-user-management-service)
              echo '::set-output name=SSH_HOSTNAME::github.com-repo-user-managment-service'
              echo '::set-output name=GITHUB_ACCOUNT::Datavarasto'
              echo '::set-output name=REPO_NAME::user-managment-service';;
            DV-file-service)
              echo '::set-output name=SSH_HOSTNAME::github.com-repo-file-service'
              echo '::set-output name=GITHUB_ACCOUNT::Datavarasto'
              echo '::set-output name=REPO_NAME::file-service';;
            DV-gateway)
              echo '::set-output name=SSH_HOSTNAME::github.com-repo-gateway'
              echo '::set-output name=GITHUB_ACCOUNT::Datavarasto'
              echo '::set-output name=REPO_NAME::gateway';;
            DV-mongo-db)
              echo '::set-output name=SSH_HOSTNAME::github.com-repo-mongo-db'
              echo '::set-output name=GITHUB_ACCOUNT::Datavarasto'
              echo '::set-output name=REPO_NAME::mongo-db';;
            *) 
              echo "Invalid input"
              exit 1;;
          esac

      - name: Pull from repo
        run: |
          cd ~/repositories/${{ steps.repo.outputs.REPO_NAME }}
          git fetch
          git switch ${{ github.event.inputs.branch }}
          git pull --rebase

      - name: Clone from repo if pull fails
        if: failure()
        run: |
          cd ~/repositories
          git clone git@${{ steps.repo.outputs.SSH_HOSTNAME }}:${{ steps.repo.outputs.GITHUB_ACCOUNT }}/${{ steps.repo.outputs.REPO_NAME }}.git

      - name: Checkout to selected branch
        if: always()
        run: |
          cd ~/repositories/${{ steps.repo.outputs.REPO_NAME }}
          git checkout ${{ github.event.inputs.branch }}

  build:
    needs: fetch-repo
    runs-on: self-hosted
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3

      # "uses" Cannot be used dynamically via expression, so we have to make own step for each app with an "if" clause...
      - name: Run build action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'sports-location-tracker'
        uses: ./build-actions/sports-location-tracker
        with:
          env: ${{ github.event.inputs.env }}

      - name: Run build action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'DV-datavarasto-ui'
        uses: ./build-actions/datavarasto/datavarasto-ui
        with:
          env: ${{ github.event.inputs.env }}

      - name: Run build action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'DV-user-management-service'
        uses: ./build-actions/datavarasto/user-management-service
        with:
          env: ${{ github.event.inputs.env }}

      - name: Run build action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'DV-file-service'
        uses: ./build-actions/datavarasto/file-service
        with:
          env: ${{ github.event.inputs.env }}

      - name: Run build action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'DV-gateway'
        uses: ./build-actions/datavarasto/gateway
        with:
          env: ${{ github.event.inputs.env }}

      - name: Run build action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'DV-mongo-db'
        uses: ./build-actions/datavarasto/mongo-db
        with:
          env: ${{ github.event.inputs.env }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Run deploy action for ${{ github.event.inputs.app }}
        if: github.event.inputs.app == 'sports-location-tracker'
        uses: ./deploy-actions/sports-location-tracker
        with:
          env: ${{ github.event.inputs.env }}

      - name: Run deploy action for ${{ github.event.inputs.app }}
        if: |
          github.event.inputs.app == 'DV-datavarasto-ui' || 
          github.event.inputs.app == 'DV-user-management-service' || 
          github.event.inputs.app == 'DV-file-service' || 
          github.event.inputs.app == 'DV-gateway' ||
          github.event.inputs.app == 'DV-mongo-db'
        uses: ./deploy-actions/datavarasto
        with:
          env: ${{ github.event.inputs.env }}

  e2e-test:
    needs: deploy
    name: Run e2e tests for ${{ github.event.inputs.app }}
    if: ${{ github.event.inputs.test }} == 'true' && ${{ github.event.inputs.app }} != 'sports-location-tracker'
    uses: ./.github/workflows/e2e-test.yml
    with:
      app: datavarasto
      env: ${{ github.event.inputs.env }}

  rollback:
    needs: e2e-test
    name: Rollback
    if: always() && needs.e2e-test.result == 'failure'
    uses: ./.github/workflows/rollback.yml
    with:
      app: ${{ github.event.inputs.app }}
      env: ${{ github.event.inputs.env }}
